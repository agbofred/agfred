---
title: "Problem Set 3"
subtitle: "Due: September 26, 2023 at 12:noon"
format:
  html:
    theme:
      light: 
        - cosmo
        - psets.scss
      dark: darkly
    fontsize: 1.2em
    highlight-style: atom-one
    toc: true
    toc-depth: 2
    html-math-method: katex
    embed-resources: true
    title-block-banner: linear-gradient(90deg, rgba(117,76,245,1) 0%, rgba(0,212,255,1) 100%)
    title-block-banner-color: white
---

All assignment work will be done in the included template files on GitHub as per usual. _Please_ do not forget to fill out the metadata at the top of each template! At the very least fill out if you worked alongside anyone to give them proper credit.

```{=html}
<a href='https://classroom.github.com/a/6YkoUT4L' target="_blank" class="btn btn-info" style='margin:auto; display: block; width:50%;'>Accept Assignment</a>
```
<br>

# Problem 1
Here your goal is to write a function named `draw_console_pyramid` which takes a single argument equating to the desired pyramid height. Your function should then print to the terminal a pyramid (constructed of `*` characters) of the specified height in rows, in which the width of each row increases by _two_ as you move downward in the console (toward the base of the pyramid). Each of the rows should be centered with respect to the others, and the bottom row should begin at the left margin. Calling `draw_console_pyramid(8)` should thus produce the following:
```python
>>> draw_console_pyramid(8)
       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
```

Notice how the bottom row of the pyramid starts immediately, with no space between it and the left margin, and that each row of the pyramid is centered on the others, increasing by 2 each time.

I've already set up the template to call this function to draw a pyramid of height 8 for your testing purposes, but you should absolutely test your function with other heights as well to ensure it is working as desired in all cases.

:::{.hint .alert .alert-success}
Hint: In order to keep things centered, you are going to need to add an amount of space characters to the front of most lines. Think about how you could assemble these strings, and how you'll know how many characters to add. As always, decomposing the problem into smaller problems can be helpful!
:::


# Problem 2

## Part A
As you will discover next week, implementing the Wordle project requires you to take account of the possibility that a word might contain more than one instance of the same letter. In preparation of that, your task here is to write a predicate function called `contains_repeated_letters(word)` which returns `True` if any of the characters in the word appear more than once, not necessarily consecutively. Thus,
```python
contains_repeated_letters("single")
```
should return `False`, as no letter ever shows up twice. Conversely,
```python
contains_repeated_letters("repeating")
```
should return `True`, as the letter `"e"` shows up twice. Test your function against more words to ensure that it is working properly!

## Part B
Now use `contains_repeated_letters` together with the `english.py` library to write a function called `longest_no_repeats` that finds and returns the longest word in the English dictionary that contains no repeated letters.


# Problem 3
Many people in English-speaking countries have played the Pig Latin game at some point in their lives. There are other invented "languages" in which words are created using some simple transformation of English. One such language is called _Obenglobish_, in which words are created by adding the letters _ob_ before the vowels (_a, e, i, o_ and _u_) in an English word. For example, under this rule, the word _english_ gets the letters _ob_ added before the _e_ and the _i_, to form _obenglobish_, which is how the language got its name.

In official Obenglobish, the _ob_ characters are only added before vowels that are pronounced, which means that a word like _game_ would become _gobame_ rather than _gobamobe_ since the final _e_ is silent. While it is impossible to implement this rule perfectly, you can do a pretty good job by adopting the rule that _ob_ should be added before every vowel in the word **except when**:

- the vowel follows another vowel
- the vowel is an _e_ occurring at the end of a word

Write a function `to_obenglobish` that takes an English word as an argument and returns its Obenglobish equivalent, using the translation rules above. For example, your function should be able to output something similar to below:
```python
>>> print(to_obenglobish("english"))
obenglobish
>>> print(to_obenglobish("gooiest"))
gobooiest
>>> print(to_obenglobish("amaze"))
obamobaze
>>> print(to_obenglobish("rot"))
robot
```
Don't forget about decomposition! I found it very useful on this problem to write predicate functions to take care of checking the above special conditions.
